---
### [Change System Name] awsmaster
AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPC, Internet Gateway, Subnet, Route Table, VPC Endpoint etc.

Mappings:
  EnvironmentMap:
    prod:
      VPCCidrBlock: 10.0.0.0/19
      ## SubnetPublicCidrBlock    = 10.0.0.0/24 - 10.0.3.0/24 (AZ A+C+D+?)
      ## SubnetProtectedCidrBlock = 10.0.4.0/24 - 10.0.7.0/24 (AZ A+C+D+?)
      ## SubnetPrivateCidrBlock   = 10.0.8.0/24 - 10.0.11.0/24 (AZ A+C+D+?)
    stg:
      VPCCidrBlock: 10.0.32.0/19
      ## SubnetPublicCidrBlock    = 10.0.32.0/24 - 10.0.35.0/24 (AZ A+C+D+?)
      ## SubnetProtectedCidrBlock = 10.0.36.0/24 - 10.0.39.0/24 (AZ A+C+D+?)
      ## SubnetPrivateCidrBlock   = 10.0.40.0/24 - 10.0.43.0/24 (AZ A+C+D+?)
    dev:
      VPCCidrBlock: 10.0.64.0/19
      ## SubnetPublicCidrBlock    = 10.0.64.0/24 - 10.0.67.0/24 (AZ A+C+D+?)
      ## SubnetProtectedCidrBlock = 10.0.68.0/24 - 10.0.71.0/24 (AZ A+C+D+?)
      ## SubnetPrivateCidrBlock   = 10.0.72.0/24 - 10.0.75.0/24 (AZ A+C+D+?)

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: awsmaster ### [Change System Name]
  Environment:
    Description: Environment
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - stg
      - dev
  CreateSubnetProtected:
    Description: Create Protected Subnet
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  CidrBits:
    Description: Subnet bits for the CIDR. For example, specifying a value "8" for this parameter will create a CIDR with a mask of "/24".
    Type: Number
    Default: 8
    MinValue: 4
    MaxValue: 16

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
          - SystemName
          - Environment
          - CreateSubnetProtected
          - CidrBits

Conditions:
  ShouldCreateSubnetProtected: !Equals [ !Ref CreateSubnetProtected, true ]

Resources:
  ## EC2(VPC): VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-vpc

  ## EC2(VPC): Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-igw

  ## EC2(VPC): VPC Gateway Attachment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ## EC2(VPC): Route Table (Public)
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-public-rtb

  ## EC2(VPC): Route (Public) (Default)
  RoutePublicDefault:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## EC2(VPC): Subnet (Public-A)
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-public-subnet-a

  ## EC2(VPC): Subnet (Public-A) Route Table (Public) Association
  SubnetRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic

  ## EC2(VPC): Subnet (Public-C)
  SubnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-public-subnet-c

  ## EC2(VPC): Subnet (Public-C) Route Table (Public) Association
  SubnetRouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicC
      RouteTableId: !Ref RouteTablePublic

  ## EC2(VPC): Subnet (Public-D)
  SubnetPublicD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}d
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-public-subnet-d

  ## EC2(VPC): Subnet (Public-D) Route Table (Public) Association
  SubnetRouteTableAssociationPublicD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicD
      RouteTableId: !Ref RouteTablePublic

  ## EC2(VPC): EIP
  EIPNATGatewayA:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-nat-a-eip

  ## EC2(VPC): NAT Gateway @ Public-A
  NATGatewayA:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNATGatewayA.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-nat-a

  ## EC2(VPC): Route Table (Protected-A)
  RouteTableProtectedA:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-rtb-a

  ## EC2(VPC): Route (Protected-A) (Default)
  RouteProtectedADefault:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableProtectedA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  ## EC2(VPC): Route Table (Protected-C)
  RouteTableProtectedC:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-rtb-c

  ## EC2(VPC): Route (Protected-C) (Default)
  RouteProtectedCDefault:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableProtectedC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  ## EC2(VPC): Route Table (Protected-D)
  RouteTableProtectedD:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-rtb-d

  ## EC2(VPC): Route (Protected-D) (Default)
  RouteProtectedDDefault:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableProtectedD
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  ## EC2(VPC): Subnet (Protected-A)
  SubnetProtectedA:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-subnet-a

  ## EC2(VPC): Subnet (Protected-A) Route Table (Protected-A) Association
  SubnetRouteTableAssociationProtectedA:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetProtectedA
      RouteTableId: !Ref RouteTableProtectedA

  ## EC2(VPC): Subnet (Protected-C)
  SubnetProtectedC:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-subnet-c

  ## EC2(VPC): Subnet (Protected-C) Route Table (Protected-C) Association
  SubnetRouteTableAssociationProtectedC:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetProtectedC
      RouteTableId: !Ref RouteTableProtectedC

  ## EC2(VPC): Subnet (Protected-D)
  SubnetProtectedD:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 6, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}d
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-protected-subnet-d

  ## EC2(VPC): Subnet (Protected-D) Route Table (Protected-D) Association
  SubnetRouteTableAssociationProtectedD:
    Condition: ShouldCreateSubnetProtected
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetProtectedD
      RouteTableId: !Ref RouteTableProtectedD

  ## EC2(VPC): Route Table (Private)
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-private-rtb

  ## EC2(VPC): Subnet (Private-A)
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 8, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-private-subnet-a

  ## EC2(VPC): Subnet (Private-A) Route Table (Private) Association
  SubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref RouteTablePrivate

  ## EC2(VPC): Subnet (Private-C)
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 9, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-private-subnet-c

  ## EC2(VPC): Subnet (Private-C) Route Table (Private) Association
  SubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateC
      RouteTableId: !Ref RouteTablePrivate

  ## EC2(VPC): Subnet (Private-D)
  SubnetPrivateD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 10, !Cidr [ !FindInMap [ EnvironmentMap, !Ref Environment, VPCCidrBlock ], 12, !Ref CidrBits ] ]
      AvailabilityZone: !Sub ${AWS::Region}d
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-private-subnet-d

  ## EC2(VPC): Subnet (Private-D) Route Table (Private) Association
  SubnetRouteTableAssociationPrivateD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateD
      RouteTableId: !Ref RouteTablePrivate

  ## EC2(VPC): VPC Endpoint (Gateway) (DynamoDB)
  VPCEndpointGatewayDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTablePublic
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedA, !Ref AWS::NoValue ]
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedC, !Ref AWS::NoValue ]
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedD, !Ref AWS::NoValue ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-dynamodb-gateway-vpce

  ## EC2(VPC): VPC Endpoint (Gateway) (S3)
  VPCEndpointGatewayS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTablePublic
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedA, !Ref AWS::NoValue ]
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedC, !Ref AWS::NoValue ]
        - !If [ ShouldCreateSubnetProtected, !Ref RouteTableProtectedD, !Ref AWS::NoValue ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-s3-gateway-vpce

Outputs:
  ## EC2(VPC): VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  ## EC2(VPC): Internet Gateway
  InternetGateway:
    Value: !Ref InternetGateway
    Export:
      Name: !Sub ${AWS::StackName}-InternetGateway

  ## EC2(VPC): Route Table (Public)
  RouteTablePublic:
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub ${AWS::StackName}-RouteTablePublic

  ## EC2(VPC): Subnet (Public-A)
  SubnetPublicA:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPublicA

  ## EC2(VPC): Subnet (Public-C)
  SubnetPublicC:
    Value: !Ref SubnetPublicC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPublicC

  ## EC2(VPC): Subnet (Public-D)
  SubnetPublicD:
    Value: !Ref SubnetPublicD
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPublicD

  ## EC2(VPC): EIP
  EIPNATGatewayA:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref EIPNATGatewayA
    Export:
      Name: !Sub ${AWS::StackName}-EIPNATGatewayA

  ## EC2(VPC): NAT Gateway @ Public-A
  NATGatewayA:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref NATGatewayA
    Export:
      Name: !Sub ${AWS::StackName}-NATGatewayA

  ## EC2(VPC): Route Table (Protected-A)
  RouteTableProtectedA:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref RouteTableProtectedA
    Export:
      Name: !Sub ${AWS::StackName}-RouteTableProtectedA

  ## EC2(VPC): Route Table (Protected-C)
  RouteTableProtectedC:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref RouteTableProtectedC
    Export:
      Name: !Sub ${AWS::StackName}-RouteTableProtectedC

  ## EC2(VPC): Route Table (Protected-D)
  RouteTableProtectedD:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref RouteTableProtectedD
    Export:
      Name: !Sub ${AWS::StackName}-RouteTableProtectedD

  ## EC2(VPC): Subnet (Protected-A)
  SubnetProtectedA:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref SubnetProtectedA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetProtectedA

  ## EC2(VPC): Subnet (Protected-C)
  SubnetProtectedC:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref SubnetProtectedC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetProtectedC

  ## EC2(VPC): Subnet (Protected-D)
  SubnetProtectedD:
    Condition: ShouldCreateSubnetProtected
    Value: !Ref SubnetProtectedD
    Export:
      Name: !Sub ${AWS::StackName}-SubnetProtectedD

  ## EC2(VPC): Route Table (Private)
  RouteTablePrivate:
    Value: !Ref RouteTablePrivate
    Export:
      Name: !Sub ${AWS::StackName}-RouteTablePrivate

  ## EC2(VPC): Subnet (Private-A)
  SubnetPrivateA:
    Value: !Ref SubnetPrivateA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPrivateA

  ## EC2(VPC): Subnet (Private-C)
  SubnetPrivateC:
    Value: !Ref SubnetPrivateC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPrivateC

  ## EC2(VPC): Subnet (Private-D)
  SubnetPrivateD:
    Value: !Ref SubnetPrivateD
    Export:
      Name: !Sub ${AWS::StackName}-SubnetPrivateD

  ## EC2(VPC): VPC Endpoint (Gateway) (DynamoDB)
  VPCEndpointGatewayDynamoDB:
    Value: !Ref VPCEndpointGatewayDynamoDB
    Export:
      Name: !Sub ${AWS::StackName}-VPCEndpointGatewayDynamoDB

  ## EC2(VPC): VPC Endpoint (Gateway) (S3)
  VPCEndpointGatewayS3:
    Value: !Ref VPCEndpointGatewayS3
    Export:
      Name: !Sub ${AWS::StackName}-VPCEndpointGatewayS3
