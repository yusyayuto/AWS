import boto3, re

cw = boto3.client("cloudwatch")

def _as_int(v):
    try: return int(v)
    except: return None

def _as_float(v):
    try: return float(v)
    except: return None

def _as_bool(v):
    if isinstance(v, bool): return v
    if isinstance(v, str):  return v.lower() == "true"
    return bool(v) if v is not None else None

def _replace_iid_in_dims(dims, oldi, newi):
    if not dims: return False, dims
    hit = False
    for d in dims:
        if d.get("Name") == "InstanceId" and d.get("Value") == oldi:
            d["Value"] = newi
            hit = True
    return hit, dims

def _list_children(composite_name: str) -> list[str]:
    # まず ChildrenOfAlarmName（利用可能な環境ならこれでOK）
    try:
        out = cw.describe_alarms(ChildrenOfAlarmName=composite_name)
        names = [a["AlarmName"] for a in out.get("MetricAlarms", [])]
        if names:
            return names
    except Exception:
        pass
    # フォールバック：Composite の AlarmRule から ALARM('name') を抽出
    r = cw.describe_alarms(AlarmNames=[composite_name])
    comps = r.get("CompositeAlarms", [])
    if not comps:
        return []
    rule = comps[0].get("AlarmRule", "")
    return re.findall(r"ALARM\\('([^']+)'\\)", rule)

def handler(event, context):
    """
    event = {
      "CompositeAlarmName": "composite-alarm-name",
      "OldInstanceId": "i-OLD",
      "NewInstanceId": "i-NEW"
    }
    """
    comp = event["CompositeAlarmName"]
    oldi = event["OldInstanceId"]
    newi = event["NewInstanceId"]

    targets = _list_children(comp)
    updated, skipped = [], []

    for name in targets:
        desc = cw.describe_alarms(AlarmNames=[name])
        mals = desc.get("MetricAlarms", [])
        if not mals:
            skipped.append({"alarm": name, "reason": "not_metric_alarm"})
            continue
        ma = mals[0]

        # 2系統対応：a) Metrics[]（Metric Math） b) 単一メトリクス
        if ma.get("Metrics"):
            metrics = []
            hit_any = False
            for q in ma["Metrics"]:
                q = dict(q)
                ms = q.get("MetricStat")
                if ms and ms.get("Metric") and ms["Metric"].get("Dimensions"):
                    hit, dims2 = _replace_iid_in_dims(ms["Metric"]["Dimensions"], oldi, newi)
                    if hit: hit_any = True
                    ms["Metric"]["Dimensions"] = dims2
                    q["MetricStat"] = ms
                metrics.append(q)
            if not hit_any:
                skipped.append({"alarm": name, "reason": "no_instance_dim_match"})
                continue

            req = {
                "AlarmName": ma["AlarmName"],
                "AlarmDescription": ma.get("AlarmDescription"),
                "ActionsEnabled": _as_bool(ma.get("ActionsEnabled", True)),
                "OKActions": ma.get("OKActions") or [],
                "AlarmActions": ma.get("AlarmActions") or [],
                "InsufficientDataActions": ma.get("InsufficientDataActions") or [],
                "EvaluationPeriods": _as_int(ma.get("EvaluationPeriods")),
                "DatapointsToAlarm": _as_int(ma.get("DatapointsToAlarm")) if ma.get("DatapointsToAlarm") is not None else None,
                "Threshold": _as_float(ma.get("Threshold")),
                "ComparisonOperator": ma.get("ComparisonOperator"),
                "TreatMissingData": ma.get("TreatMissingData"),
                "EvaluateLowSampleCountPercentile": ma.get("EvaluateLowSampleCountPercentile"),
                "Metrics": metrics
            }
            if ma.get("ThresholdMetricId"):
                req["ThresholdMetricId"] = ma["ThresholdMetricId"]
            req = {k:v for k,v in req.items() if v is not None}
            cw.put_metric_alarm(**req)

        else:
            dims = list(ma.get("Dimensions", []))
            hit, dims = _replace_iid_in_dims(dims, oldi, newi)
            if not hit:
                skipped.append({"alarm": name, "reason": "no_instance_dim_match"})
                continue

            req = {
                "AlarmName": ma["AlarmName"],
                "AlarmDescription": ma.get("AlarmDescription"),
                "ActionsEnabled": _as_bool(ma.get("ActionsEnabled", True)),
                "OKActions": ma.get("OKActions") or [],
                "AlarmActions": ma.get("AlarmActions") or [],
                "InsufficientDataActions": ma.get("InsufficientDataActions") or [],
                "Namespace": ma.get("Namespace"),
                "MetricName": ma.get("MetricName"),
                "Dimensions": dims,
                "Period": _as_int(ma.get("Period")),
                "EvaluationPeriods": _as_int(ma.get("EvaluationPeriods")),
                "DatapointsToAlarm": _as_int(ma.get("DatapointsToAlarm")) if ma.get("DatapointsToAlarm") is not None else None,
                "Threshold": _as_float(ma.get("Threshold")),
                "ComparisonOperator": ma.get("ComparisonOperator"),
                "TreatMissingData": ma.get("TreatMissingData"),
                "EvaluateLowSampleCountPercentile": ma.get("EvaluateLowSampleCountPercentile"),
                "Unit": ma.get("Unit")
            }
            if ma.get("ExtendedStatistic"):
                req["ExtendedStatistic"] = ma["ExtendedStatistic"]
            elif ma.get("Statistic"):
                req["Statistic"] = ma["Statistic"]
            req = {k:v for k,v in req.items() if v is not None}
            cw.put_metric_alarm(**req)

        updated.append(name)

    return {"composite": comp, "updated": updated, "skipped": skipped}
