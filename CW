- name: updateChildAlarms    # ← 新規ステップ名（自由にOK、カッコや空白は不可）
  action: aws:executeScript
  nextStep: modifyRecordSets
  isEnd: false
  inputs:
    Runtime: python3.11
    Handler: handler
    Script: |
      import boto3

      def _as_int(v):
          try: return int(v)
          except: return None

      def _as_float(v):
          try: return float(v)
          except: return None

      def _as_bool(v):
          if isinstance(v, bool): return v
          if isinstance(v, str): return v.lower() == "true"
          return bool(v) if v is not None else None

      def handler(event, context):
          cw = boto3.client("cloudwatch")

          children = event.get("Children") or []
          old_iid  = event["OldInstanceId"]
          new_iid  = event["NewInstanceId"]

          updated = []
          skipped = []

          for name in children:
              r = cw.describe_alarms(AlarmNames=[name])
              mals = r.get("MetricAlarms", [])
              if not mals:
                  skipped.append({"alarm": name, "reason": "not_metric_alarm"})
                  continue

              ma = mals[0]
              dims = (ma.get("Dimensions") or []).copy()

              # InstanceId を旧→新に置換
              hit = False
              for d in dims:
                  if d.get("Name") == "InstanceId" and d.get("Value") == old_iid:
                      d["Value"] = new_iid
                      hit = True
                      break
              if not hit:
                  skipped.append({"alarm": name, "reason": "no_instance_dim_match"})
                  continue

              # PutMetricAlarm は必須項目を全再指定する必要あり
              req = {
                  "AlarmName": ma["AlarmName"],
                  "AlarmDescription": ma.get("AlarmDescription"),
                  "ActionsEnabled": _as_bool(ma.get("ActionsEnabled", True)),
                  "OKActions": ma.get("OKActions") or [],
                  "AlarmActions": ma.get("AlarmActions") or [],
                  "InsufficientDataActions": ma.get("InsufficientDataActions") or [],
                  "Namespace": ma.get("Namespace"),
                  "MetricName": ma.get("MetricName"),
                  "Dimensions": dims,
                  "Period": _as_int(ma.get("Period")),
                  "EvaluationPeriods": _as_int(ma.get("EvaluationPeriods")),
                  "DatapointsToAlarm": _as_int(ma.get("DatapointsToAlarm")) if ma.get("DatapointsToAlarm") is not None else None,
                  "Threshold": _as_float(ma.get("Threshold")),
                  "ComparisonOperator": ma.get("ComparisonOperator"),
                  "TreatMissingData": ma.get("TreatMissingData"),
                  "EvaluateLowSampleCountPercentile": ma.get("EvaluateLowSampleCountPercentile"),
                  "Unit": ma.get("Unit"),
              }
              # Statistic / ExtendedStatistic はどちらか一方のみ
              if ma.get("ExtendedStatistic"):
                  req["ExtendedStatistic"] = ma["ExtendedStatistic"]
              elif ma.get("Statistic"):
                  req["Statistic"] = ma["Statistic"]

              # None を除去して呼び出し
              req = {k: v for k, v in req.items() if v is not None}
              cw.put_metric_alarm(**req)

              updated.append(name)

          return {"updated": updated, "skipped": skipped}
  InputPayload:
    Children: "{{ getChildAlarms.ChildAlarmNames }}"
    OldInstanceId: "{{ UnhealthyInstanceId }}"
    NewInstanceId: "{{ runInstances.InstanceId }}"